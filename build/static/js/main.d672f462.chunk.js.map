{"version":3,"sources":["component/About.jsx","component/RepoFetch.jsx","component/UserProfile.jsx","component/UserContext.js","component/RenderUsers.jsx","App.js","serviceWorker.js","index.js"],"names":["About","Repo","url","props","useState","repos","setRepo","useEffect","fetch","then","res","json","console","log","catch","error","map","repo","index","key","className","name","UserProfile","userLogin","useParams","loading","setLoading","setError","userObj","setUser","src","avatar_url","alt","login","bio","repos_url","UserContext","React","createContext","user","RenderUsers","useContext","usersList","setUsersList","ok","statusText","items","length","substring","to","App","Provider","value","path","type","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d672f462.chunk.js","sourcesContent":["import React from 'react';\r\n export function About (){\r\n     return(\r\n       <div>\r\n           About\r\n       </div>\r\n     )\r\n }","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nexport function Repo({props}){\r\n    const url = props.url;\r\n    const [repos , setRepo] = useState([]);\r\n    //const[loading , setLoading] = useState(true);\r\n    //const [error , setError] = useState('');\r\n    useEffect(()=>{\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then (res =>{console.log(res); setRepo(res)})\r\n        .catch(error => {console.log(error)});\r\n    },[url]);\r\n  \r\n    \r\n    return(\r\n        \r\n        <>\r\n            {repos && repos.map((repo , index)=>\r\n              <li key = {index} className =\"repo\">\r\n                  <h4 className = 'repo-name'>{repo.name}</h4> \r\n              </li>\r\n            )}\r\n        </>\r\n         \r\n        \r\n    )\r\n} ","import React, { useState, useEffect } from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport '../UserProfile.css';\r\nimport {Repo} from './RepoFetch';\r\n\r\nexport function UserProfile (){\r\n    const {userLogin} = useParams();\r\n    const[loading , setLoading] = useState(true);\r\n    const [error , setError] = useState('')\r\n    const [userObj , setUser] = useState([]);\r\n    useEffect(()=>{\r\n        fetch(`https://api.github.com/users/${userLogin}`)\r\n        .then(res => res.json())\r\n        .then (res => {setLoading(false) ;setUser(res);console.log(res);})\r\n        .catch(error => {setLoading(false) ; setError(error)});\r\n        \r\n    },[userLogin])\r\n   \r\n    if (loading) {\r\n            return <p>loading..</p>;\r\n          }\r\n        \r\n    if (error !== '') {\r\n            return <p>ERROR: {error}</p>;\r\n          }\r\n    return(\r\n       <main>\r\n           <aside>\r\n               <img src={`${userObj.avatar_url}`} alt=\"\" className=\"profile-img\"/>\r\n               {userObj.name && <h2>{userObj.name}</h2>}\r\n               <h3>{`Login : ${userObj.login}`}</h3>\r\n               {userObj.bio && <p className = \"bio\">{userObj.bio}</p>}\r\n               \r\n           </aside>\r\n           <div className=\"repos\">\r\n              <ul className= \"repos-list\">\r\n                <Repo props = {{'url': userObj.repos_url} }/> \r\n              </ul>\r\n                \r\n              \r\n           </div>\r\n       </main>\r\n    )\r\n}","\r\nimport React from 'react';\r\nexport  const UserContext= React.createContext({user : ''})\r\n","import React , {useState , useEffect, useContext} from 'react';\r\nimport {UserContext } from './UserContext';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function RenderUsers(){\r\n    const {user} = useContext(UserContext);\r\n    const [usersList ,setUsersList] = useState([]);\r\n    const [error ,setError] = useState(null);\r\n    useEffect(()=>{\r\n    \r\n      if(!user){\r\n        return;\r\n      }\r\n      fetch(`https://api.github.com/search/users?q=${user}`)\r\n      .then(res =>\r\n        {if(!res.ok){\r\n        return (setError(res.statusText))\r\n        }else{\r\n          setError(null);\r\n          return res.json();\r\n        }\r\n          \r\n        })\r\n      .then(res =>setUsersList(res.items)) \r\n      .catch(error => console.log ('render error :', error))    \r\n    },[user]);\r\n    if (!user){\r\n     return 'No users'\r\n    }\r\n\r\n    if (error){\r\n    return (\r\n      <>\r\n       <p>{`Erorr  : ${error} `}</p>\r\n      </> \r\n    );\r\n    }\r\n    if(usersList && usersList.length === 0){\r\n      return 'Loding...'\r\n    }\r\n    return(\r\n        <div>\r\n            {usersList.map((userObj,key)=>{\r\n                if( userObj.login.substring(0,user.length) === user ){\r\n                    return (\r\n                      <Link to = {`/users/${userObj.login}`}  key = {key}><p >{userObj.login}</p></Link> \r\n                    )\r\n                }else{return false}\r\n            } )}\r\n        </div>\r\n    )\r\n}\r\n//","import React ,{useState }from 'react';\r\nimport './App.css';\r\nimport {About} from './component/About'\r\nimport {UserProfile} from './component/UserProfile'\r\nimport RenderUsers from './component/RenderUsers';\r\nimport {UserContext} from './component/UserContext';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [user , setUser] = useState('');\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <Router>\r\n       <UserContext.Provider value = {{user : user}} > \r\n        <div>\r\n          <nav>\r\n              <ul className=\"head-list\">\r\n                <li className=\"nav-items\">\r\n                  <Link to = \"/\" className = \"nav-bar\">\r\n                     Home\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-items\">\r\n                  <Link to = \"/about\" className = \"nav-bar\">\r\n                     About\r\n                  </Link>\r\n                </li>\r\n              </ul>   \r\n          </nav>\r\n          <Switch>\r\n            <Route path=\"/users/:userLogin\"> \r\n               <UserProfile/>\r\n            </Route>\r\n            <Route path=\"/about\">\r\n               <About/>\r\n            </Route>\r\n            <Route path = \"/\">\r\n              <h1>Github user searcher</h1>\r\n              <div>\r\n                <form >\r\n                   <input type=\"text\" value = {user} onChange = {(e)=>setUser(e.target.value)} />\r\n                </form>\r\n                </div>                \r\n              <RenderUsers />      \r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n        </UserContext.Provider >\r\n      </Router>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}